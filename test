import org.finra.cpu.rmdownload.service.ItemDetailsPublisher;
import org.finra.cpu.rmdownload.web.rest.dto.RequestManagerCaseDTO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class ItemDetailsPublisherTest {

    @Mock
    private EventBus mockItemDetailsEventBus;  // Mock for EventBus

    @Mock
    private Logger mockLogger;  // Mock for Logger

    @InjectMocks
    private ItemDetailsPublisher itemDetailsPublisher;  // The class we are testing

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);  // Initialize mocks

        // Mock the LoggerFactory to return the mocked logger
        Mockito.when(LoggerFactory.getLogger(ItemDetailsPublisher.class)).thenReturn(mockLogger);
        
        // If there's a setter method or if we can directly inject, do it here.
        itemDetailsPublisher.itemDetailsEventBus = mockItemDetailsEventBus;  // Set the mock EventBus
        itemDetailsPublisher.log = mockLogger;  // Set the mock Logger
    }

    @Test
    public void testPublishNotifiesEventBus() {
        // Arrange
        RequestManagerCaseDTO mockDTO = mock(RequestManagerCaseDTO.class);
        when(mockDTO.toString()).thenReturn("Mock RequestManagerCaseDTO");

        // Act
        itemDetailsPublisher.publish(mockDTO);

        // Assert: Verify that the event bus's notify method is called with the correct arguments
        verify(mockItemDetailsEventBus).notify(eq("cpu-rmdownload-itemDetails"), any());
    }

    @Test
    public void testPublishLogsDebugMessage() {
        // Arrange
        RequestManagerCaseDTO mockDTO = mock(RequestManagerCaseDTO.class);
        when(mockDTO.toString()).thenReturn("Mock RequestManagerCaseDTO");

        // Act
        itemDetailsPublisher.publish(mockDTO);

        // Assert: Verify that the logger's debug method is called with the correct message
        verify(mockLogger).debug(eq("publish requestManagerCaseDTO: {}"), eq(mockDTO));
    }

    @Test
    public void testPublishWithNullDTO() {
        // Act: Call the method with null
        itemDetailsPublisher.publish(null);

        // Assert: Verify the behavior, e.g., ensure that the event bus's notify was not called
        verify(mockItemDetailsEventBus, never()).notify(anyString(), any());
    }

    @Test
    public void testPublishHandlesEmptyDTO() {
        // Arrange: Mock an empty DTO
        RequestManagerCaseDTO mockEmptyDTO = mock(RequestManagerCaseDTO.class);
        when(mockEmptyDTO.toString()).thenReturn("");

        // Act
        itemDetailsPublisher.publish(mockEmptyDTO);

        // Assert: Verify that the event bus is called with the empty DTO
        verify(mockItemDetailsEventBus).notify(eq("cpu-rmdownload-itemDetails"), any());
    }
}


import org.finra.cpu.rmdownload.service.ItemDetailsPublisher;
import org.finra.cpu.rmdownload.web.rest.dto.RequestManagerCaseDTO;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class ItemDetailsPublisherTest {

    @Mock
    private EventBus mockItemDetailsEventBus;

    @Mock
    private Logger mockLogger;

    private ItemDetailsPublisher itemDetailsPublisher;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);  // Initialize mocks
        itemDetailsPublisher = new ItemDetailsPublisher();
        itemDetailsPublisher.itemDetailsEventBus = mockItemDetailsEventBus;

        // Mock the Logger to avoid actual logging
        LoggerFactory.getLogger(ItemDetailsPublisher.class);
        itemDetailsPublisher.log = mockLogger;
    }

    @Test
    public void testPublishNotifiesEventBus() {
        // Arrange
        RequestManagerCaseDTO mockDTO = mock(RequestManagerCaseDTO.class);
        when(mockDTO.toString()).thenReturn("Mock RequestManagerCaseDTO");

        // Act
        itemDetailsPublisher.publish(mockDTO);

        // Assert: Verify that the event bus's notify method is called with the correct arguments
        verify(mockItemDetailsEventBus).notify(eq("cpu-rmdownload-itemDetails"), any());
    }

    @Test
    public void testPublishLogsDebugMessage() {
        // Arrange
        RequestManagerCaseDTO mockDTO = mock(RequestManagerCaseDTO.class);
        when(mockDTO.toString()).thenReturn("Mock RequestManagerCaseDTO");

        // Act
        itemDetailsPublisher.publish(mockDTO);

        // Assert: Verify that the logger's debug method is called with the correct message
        verify(mockLogger).debug(eq("publish requestManagerCaseDTO: {}"), eq(mockDTO));
    }

    @Test
    public void testPublishWithNullDTO() {
        // Act: Call the method with null
        itemDetailsPublisher.publish(null);

        // Assert: Verify the behavior, e.g., ensure that the event bus's notify was not called
        verify(mockItemDetailsEventBus, never()).notify(anyString(), any());
    }

    @Test
    public void testPublishHandlesEmptyDTO() {
        // Arrange: Mock an empty DTO
        RequestManagerCaseDTO mockEmptyDTO = mock(RequestManagerCaseDTO.class);
        when(mockEmptyDTO.toString()).thenReturn("");

        // Act
        itemDetailsPublisher.publish(mockEmptyDTO);

        // Assert: Verify that the event bus is called with the empty DTO
        verify(mockItemDetailsEventBus).notify(eq("cpu-rmdownload-itemDetails"), any());
    }
}


import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.io.File;
import java.io.FileFilter;

public class FileTransportServiceTest {

    @Mock
    private RequestManagerDownloadConfiguration mockConfiguration;

    @Mock
    private S3Service mockS3Service;

    @Mock
    private Job mockJob;

    @Mock
    private RequestManagerCase mockRequestManagerCase;

    @Mock
    private File mockCaseFolder;

    @Mock
    private File mockRequestFolder;

    @Mock
    private File mockItemZip;

    private FileTransportService fileTransportService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);  // Initializes the mocks
        fileTransportService = new FileTransportService();
        fileTransportService.configuration = mockConfiguration;
        fileTransportService.s3Service = mockS3Service;

        // Mock the behavior of methods in RequestManagerDownloadConfiguration
        when(mockConfiguration.getCpuEnforcementGoldPath()).thenReturn("/some/path");
        when(mockConfiguration.getCpuEnforcementBucketName()).thenReturn("bucketName");
        when(mockConfiguration.getCpuEnforcementKeyName()).thenReturn("keyName");
        when(mockConfiguration.getKmsKey()).thenReturn("kmsKey");

        // Mock the behavior of RequestManagerCase and Job
        when(mockJob.getRequestManagerCase()).thenReturn(mockRequestManagerCase);
        when(mockRequestManagerCase.getCaseId()).thenReturn("123");

        // Create mock folders and files for testing
        File[] mockRequestFolders = new File[] { mockRequestFolder };
        File[] mockItemZips = new File[] { mockItemZip };

        // Mock the listFiles for directories
        when(mockCaseFolder.listFiles((FileFilter) any())).thenReturn(mockRequestFolders);

        // Mock the listFiles for files
        when(mockRequestFolder.listFiles((FileFilter) any())).thenReturn(mockItemZips);
    }

    @Test
    public void testUploadItems() {
        // Act: Call the method being tested
        fileTransportService.uploadItems(mockJob);

        // Assert: Verify the correct interactions with the mock objects
        verify(mockS3Service).uploadS3File(anyString(), anyString(), anyString(), anyString());
    }
}