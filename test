import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(MockitoJUnitRunner.class)
public class ItemServiceTest {

    // Mock the ItemRepository dependency
    @Mock
    private ItemRepository itemRepository;

    // Inject mocks into the ItemService instance
    @InjectMocks
    private ItemService itemService;

    private Item item;

    @Before
    public void setUp() {
        // Initialize the item object for testing
        item = new Item();
        item.setId(1L);
        item.setName("Test Item");
    }

    @Test
    public void testSave() {
        // Mock the save method to return the same item
        when(itemRepository.save(any(Item.class))).thenReturn(item);

        // Call the method being tested
        Item savedItem = itemService.save(item);

        // Verify that save was called on the repository
        verify(itemRepository, times(1)).save(any(Item.class));

        // Assert that the saved item is the same as the item returned by the method
        assertEquals(item, savedItem);
    }

    @Test
    public void testFindAll() {
        // Mock the findAll method to return a mock page of items
        Pageable pageable = PageRequest.of(0, 10);
        Page<Item> mockPage = mock(Page.class);
        when(itemRepository.findAll(pageable)).thenReturn(mockPage);

        // Call the method being tested
        Page<Item> itemsPage = itemService.findAll(pageable);

        // Verify that findAll was called on the repository
        verify(itemRepository, times(1)).findAll(pageable);

        // Assert that the result is the mocked page
        assertEquals(mockPage, itemsPage);
    }

    @Test
    public void testFindOne() {
        // Mock the findById method to return an item
        when(itemRepository.findById(1L)).thenReturn(java.util.Optional.of(item));

        // Call the method being tested
        Item foundItem = itemService.findOne(1L);

        // Verify that findById was called on the repository
        verify(itemRepository, times(1)).findById(1L);

        // Assert that the found item is the same as the item returned by the method
        assertEquals(item, foundItem);
    }

    @Test
    public void testDelete() {
        // Call the method being tested
        itemService.delete(1L);

        // Verify that deleteById was called on the repository
        verify(itemRepository, times(1)).deleteById(1L);
    }
}