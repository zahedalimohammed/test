package org.finra.cpu.service;

import org.finra.cpu.repository.InstanceRepository;
import org.finra.cpu.transformer.LookUpTransformer;
import org.finra.cpu.model.Instance;
import org.finra.cpu.model.LookUpObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class IndexServiceTest {

    @Mock
    private InstanceRepository instanceRepository;

    @Mock
    private LookUpTransformer lookUpTransformer;

    @InjectMocks
    private IndexService indexService;

    @BeforeEach
    void setUp() {
        // Setup or initialization can be added here if necessary
    }

    @Test
    void testGetHealthyInstance() {
        // Arrange
        Instance instance1 = new Instance(1L, true);
        Instance instance2 = new Instance(2L, true);
        List<Instance> healthyInstances = Arrays.asList(instance1, instance2);

        LookUpObject lookUpObject1 = new LookUpObject(1L);
        LookUpObject lookUpObject2 = new LookUpObject(2L);

        when(instanceRepository.findByHealthyTrue()).thenReturn(healthyInstances);
        when(lookUpTransformer.fromInstanceToLookUp(instance1)).thenReturn(lookUpObject1);
        when(lookUpTransformer.fromInstanceToLookUp(instance2)).thenReturn(lookUpObject2);

        // Act
        List<LookUpObject> result = indexService.getHealthyInstance();

        // Assert
        assertEquals(2, result.size());
        assertEquals(lookUpObject1, result.get(0));
        assertEquals(lookUpObject2, result.get(1));
    }
}

package org.finra.cpu.service;

import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class EncryptionServiceTest {

    private EncryptionService encryptionService;
    private String encryptionPassword;

    @BeforeEach
    void setUp() {
        encryptionService = new EncryptionService();
        encryptionPassword = "testPassword";
    }

    @Test
    void testEncryptString() {
        String originalString = "HelloWorld";
        String encryptedString = encryptionService.encryptString(originalString, encryptionPassword);

        assertNotNull(encryptedString);
        assertNotEquals(originalString, encryptedString, "Encrypted string should not match original string");
    }

    @Test
    void testDecryptString() {
        String originalString = "HelloWorld";
        String encryptedString = encryptionService.encryptString(originalString, encryptionPassword);
        String decryptedString = encryptionService.decryptString(encryptedString, encryptionPassword);

        assertNotNull(decryptedString);
        assertEquals(originalString, decryptedString, "Decrypted string should match original string");
    }

    @Test
    void testDecryptWithWrongPassword() {
        String originalString = "HelloWorld";
        String encryptedString = encryptionService.encryptString(originalString, encryptionPassword);
        
        assertThrows(Exception.class, () -> {
            encryptionService.decryptString(encryptedString, "wrongPassword");
        }, "Decrypting with wrong password should throw an exception");
    }
}


import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.extension.ExtendWith;
import java.net.InetAddress;
import java.net.UnknownHostException;

@ExtendWith(MockitoExtension.class)
public class LogProcessorStatusJobTest {

    @Mock
    private RestUtil restUtil;

    @InjectMocks
    private LogProcessorStatusJob logProcessorStatusJob;

    @BeforeEach
    public void setup() {
        // Additional setup if necessary
    }

    @Test
    public void testLogStatus_Success() throws UnknownHostException {
        // Arrange
        Processor processor = new Processor("testComputer", "127.0.0.1");
        JsonResponse jsonResponse = new JsonResponse("success");

        when(System.getenv("COMPUTERNAME")).thenReturn("testComputer");
        when(InetAddress.getLocalHost().getHostAddress()).thenReturn("127.0.0.1");
        when(restUtil.getJsonResponse(any(Processor.class))).thenReturn(jsonResponse);

        // Act
        logProcessorStatusJob.logStatus();

        // Assert
        verify(restUtil, times(1)).getJsonResponse(any(Processor.class));
    }

    @Test
    public void testLogStatus_Failure() throws UnknownHostException {
        // Arrange
        Processor processor = new Processor("testComputer", "127.0.0.1");
        JsonResponse jsonResponse = new JsonResponse("error");

        when(System.getenv("COMPUTERNAME")).thenReturn("testComputer");
        when(InetAddress.getLocalHost().getHostAddress()).thenReturn("127.0.0.1");
        when(restUtil.getJsonResponse(any(Processor.class))).thenReturn(jsonResponse);

        // Act
        logProcessorStatusJob.logStatus();

        // Assert
        verify(restUtil, times(1)).getJsonResponse(any(Processor.class));
    }

    @Test
    public void testLogStatus_UnknownHostException() throws UnknownHostException {
        // Arrange
        when(System.getenv("COMPUTERNAME")).thenReturn("testComputer");
        when(InetAddress.getLocalHost()).thenThrow(new UnknownHostException("Host not found"));

        // Act & Assert
        assertDoesNotThrow(() -> logProcessorStatusJob.logStatus());
    }
}




package org.finra.cpu.utilities.proj.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.finra.cpu.utilities.model.Constants;
import org.finra.cpu.utilities.model.PSTCountResponse;
import org.finra.cpu.utilities.model.Project;
import org.finra.cpu.utilities.model.ProjectNextProcess;
import org.finra.cpu.utilities.service.FileService;
import org.finra.cpu.utilities.service.PathHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockedStatic;

import java.io.File;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ProjectServiceImplTest {

    @Mock
    private FileService fileService;

    @InjectMocks
    private ProjectServiceImpl projectService;

    private Project project;
    private ProjectNextProcess projectNextProcess;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        project = new Project();
        project.setMatterID("123");
        project.setProjectID("456");
        project.setResponseDate("2024-10-15");

        projectNextProcess = new ProjectNextProcess();
        projectNextProcess.setNextProcess("SampleProcess");
        projectNextProcess.setProject(project);
    }

    @Test
    void testGetLogs_FileExists() {
        try (MockedStatic<PathHelper> mockedPathHelper = mockStatic(PathHelper.class)) {
            String logPath = "/some/path/log.txt";
            File mockFile = mock(File.class);

            mockedPathHelper.when(() -> PathHelper.getLogPath(project)).thenReturn(logPath);
            when(mockFile.exists()).thenReturn(true);
            when(fileService.readLogFile(any(File.class))).thenReturn("Sample logs");

            String logs = projectService.getlogs(project);

            assertEquals("Sample logs", logs);
            verify(fileService).readLogFile(any(File.class));
        }
    }

    @Test
    void testGetLogs_FileNotExists() {
        try (MockedStatic<PathHelper> mockedPathHelper = mockStatic(PathHelper.class)) {
            String logPath = "/some/path/log.txt";
            File mockFile = mock(File.class);

            mockedPathHelper.when(() -> PathHelper.getLogPath(project)).thenReturn(logPath);
            when(mockFile.exists()).thenReturn(false);

            String logs = projectService.getlogs(project);

            assertTrue(logs.isEmpty());
        }
    }

    @Test
    void testAddProjectFileForStartProcess_Success() throws IOException {
        try (MockedStatic<PathHelper> mockedPathHelper = mockStatic(PathHelper.class)) {
            String camelInboxPath = "/some/path/Inbox";
            String fileName = "123 2024-10-15 456.txt";
            File mockFolder = mock(File.class);

            mockedPathHelper.when(PathHelper::getCamelPath).thenReturn("/some/path");
            when(mockFolder.mkdirs()).thenReturn(true);
            when(mockFolder.exists()).thenReturn(false);

            boolean result = projectService.addProjectFileForStartProcess(project);

            assertTrue(result);
        }
    }

    @Test
    void testAddProjectFileForStartProcess_Failure() throws IOException {
        try (MockedStatic<PathHelper> mockedPathHelper = mockStatic(PathHelper.class)) {
            String camelInboxPath = "/some/path/Inbox";
            String fileName = "123 2024-10-15 456.txt";
            File mockFolder = mock(File.class);

            mockedPathHelper.when(PathHelper::getCamelPath).thenReturn("/some/path");
            when(mockFolder.mkdirs()).thenReturn(false);

            boolean result = projectService.addProjectFileForStartProcess(project);

            assertFalse(result);
        }
    }

    @Test
    void testGetProjectExist_True() {
        try (MockedStatic<PathHelper> mockedPathHelper = mockStatic(PathHelper.class)) {
            String projectPath = "/some/project/path";
            File mockFolder = mock(File.class);

            mockedPathHelper.when(() -> PathHelper.getSilverProjectMappedPath(project)).thenReturn(projectPath);
            when(mockFolder.exists()).thenReturn(true);
            when(mockFolder.isDirectory()).thenReturn(true);

            boolean exists = projectService.getProjectExist(project);

            assertTrue(exists);
        }
    }

    @Test
    void testGetProjectExist_False() {
        try (MockedStatic<PathHelper> mockedPathHelper = mockStatic(PathHelper.class)) {
            String projectPath = "/some/project/path";
            File mockFolder = mock(File.class);

            mockedPathHelper.when(() -> PathHelper.getSilverProjectMappedPath(project)).thenReturn(projectPath);
            when(mockFolder.exists()).thenReturn(false);

            boolean exists = projectService.getProjectExist(project);

            assertFalse(exists);
        }
    }

    @Test
    void testGetPSTCount() {
        when(fileService.getPSTCount(project)).thenReturn(5);

        PSTCountResponse response = projectService.getPSTCount(project);

        assertNotNull(response);
        assertEquals("5", response.getPstCount());
    }
}


package org.finra.cpu.utilities.proj.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.finra.cpu.utilities.model.Constants;
import org.finra.cpu.utilities.model.PSTCountResponse;
import org.finra.cpu.utilities.model.Project;
import org.finra.cpu.utilities.model.ProjectNextProcess;
import org.finra.cpu.utilities.service.FileService;
import org.finra.cpu.utilities.service.PathHelper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.File;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ProjectServiceImplTest {

    @Mock
    private FileService fileService;

    @InjectMocks
    private ProjectServiceImpl projectService;

    private Project project;
    private ProjectNextProcess projectNextProcess;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        project = new Project(); // Initialize with dummy values as necessary
        project.setMatterID("123");
        project.setProjectID("456");
        project.setResponseDate("2024-10-15");

        projectNextProcess = new ProjectNextProcess();
        projectNextProcess.setNextProcess("SampleProcess");
        projectNextProcess.setProject(project);
    }

    @Test
    void testGetLogs_FileExists() {
        String logPath = "/some/path/log.txt";
        File mockFile = mock(File.class);

        when(mockFile.exists()).thenReturn(true);
        when(PathHelper.getLogPath(project)).thenReturn(logPath);
        when(fileService.readLogFile(mockFile)).thenReturn("Sample logs");

        String logs = projectService.getlogs(project);

        assertEquals("Sample logs", logs);
        verify(fileService).readLogFile(mockFile);
    }

    @Test
    void testGetLogs_FileNotExists() {
        String logPath = "/some/path/log.txt";
        File mockFile = mock(File.class);

        when(mockFile.exists()).thenReturn(false);
        when(PathHelper.getLogPath(project)).thenReturn(logPath);

        String logs = projectService.getlogs(project);

        assertTrue(logs.isEmpty());
    }

    @Test
    void testAddProjectFileForStartProcess_Success() throws IOException {
        String camelInboxPath = "/some/path/Inbox";
        String fileName = "123 2024-10-15 456.txt";
        File mockFolder = mock(File.class);

        when(PathHelper.getCamelPath()).thenReturn("/some/path");
        when(mockFolder.mkdirs()).thenReturn(true);
        when(mockFolder.exists()).thenReturn(false);

        boolean result = projectService.addProjectFileForStartProcess(project);

        assertTrue(result);
        verify(fileService, never()).readLogFile(any());
    }

    @Test
    void testAddProjectFileForStartProcess_Failure() throws IOException {
        String camelInboxPath = "/some/path/Inbox";
        String fileName = "123 2024-10-15 456.txt";
        File mockFolder = mock(File.class);

        when(PathHelper.getCamelPath()).thenReturn("/some/path");
        when(mockFolder.mkdirs()).thenReturn(false);

        boolean result = projectService.addProjectFileForStartProcess(project);

        assertFalse(result);
    }

    @Test
    void testGetProjectExist_True() {
        String projectPath = "/some/project/path";
        File mockFolder = mock(File.class);

        when(PathHelper.getSilverProjectMappedPath(project)).thenReturn(projectPath);
        when(mockFolder.exists()).thenReturn(true);
        when(mockFolder.isDirectory()).thenReturn(true);

        boolean exists = projectService.getProjectExist(project);

        assertTrue(exists);
    }

    @Test
    void testGetProjectExist_False() {
        String projectPath = "/some/project/path";
        File mockFolder = mock(File.class);

        when(PathHelper.getSilverProjectMappedPath(project)).thenReturn(projectPath);
        when(mockFolder.exists()).thenReturn(false);

        boolean exists = projectService.getProjectExist(project);

        assertFalse(exists);
    }

    @Test
    void testGetPSTCount() {
        when(fileService.getPSTCount(project)).thenReturn(5);

        PSTCountResponse response = projectService.getPSTCount(project);

        assertNotNull(response);
        assertEquals("5", response.getPstCount());
    }
}


return false;
CIVEI.AIIIT
ocalnost
access
log.2024-09-16.txt
new 40
｝
@Override
public boolean addProjectFileForProcessPSTs (Project project) i
ObjectMapper mapper = new ObjectMapper () ;
try ｛
String fileName = project. getMatterID() + "" + project.getResponseDate() + ""
+ project. getProjectID() + ".txt";
String camelPath = PathHelper. getCamelPath () ;
String camelInboxPath = camelPath + "||" + Constants. PROCESS PROCESS
PSTS + "||"
+ "Inbox" ;
File inboxFolder = new File (camelInboxPath) ;
1f (!inboxFolder.exists()) {
if (inboxFolder.mkdirs ()) i
} else {
logger. error ("Failed to create directory: " + camelInboxPath) ; return false;
｝
mapper. writeValue (new File (camelInboxPath, fileName), project) ;
logger. info (Constants. PROCESS_PROCESS_PSTS + " starts for " + project tostring()) ; return true;
} catch (IOException e) {
logger. error ("Error adding camel file for " + Constants. PROCESS _PROCESS_ PSIS + " for
+ project. toString(), e) ;
return false;
@Override
public boolean getProjectExist (Project project) i
String silverEbsProjectPath = PathHelper. getSilverProjectMappedPath (project) ;
File silverEbsProjectFolder = new File (silverEbsProjectPath) ;
if (silverEbsProjectFolder.exists () && silverEbsProjectFolder. isDirectory ()) f
return true;
} else 1
return false;
@Override
public PSTCountResponse getPSTCount (Project project) i
int pstCount = fileService. getPSTCount (project) ;
PSTCountResponse pstCountResponse = new PSTCountResponse () ;
pstCountResponse. setPstCount (String. valueOf (pstcount)) ;
return pstCountResponse;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class LogFileSearcher {

    public static void main(String[] args) {
        // Path to the log file
        String logFilePath = "c:\\ProgramData\\McAfee\\Endpoint Security\\Logs\\OnAccessScan_Activity.log";
        
        // Path to the output file
        String outputFilePath = "c:\\ProgramData\\McAfee\\Endpoint Security\\Logs\\filtered_log.txt";
        
        // String to search for in each line
        String searchString = "caseID";

        // Try-with-resources statement to ensure resources are closed automatically
        try (BufferedReader br = new BufferedReader(new FileReader(logFilePath));
             BufferedWriter bw = new BufferedWriter(new FileWriter(outputFilePath))) {

            String line;
            // Read the log file line by line
            while ((line = br.readLine()) != null) {
                // Check if the line contains the search string
                if (line.contains(searchString)) {
                    // Write the matching line to the output file
                    bw.write(line);
                    bw.newLine();
                }
            }

            // Print a completion message
            System.out.println("Search completed and matching lines have been saved to " + outputFilePath);

        } catch (IOException e) {
            // Print stack trace if an I/O error occurs
            e.printStackTrace();
        }
    }
}
import javax.net.ssl.*;
import java.security.SecureRandom;
import java.security.Security;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

public class YourClass {

    public void doTrustToCertificates() throws Exception {
        TrustManager[] trustAllCerts = { (X509TrustManager) (X509Certificate[] certs, String authType) -> {} };

        SSLContext sc = SSLContext.getInstance("SSL");
        sc.init(null, trustAllCerts, new SecureRandom());

        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

        HostnameVerifier hv = (String urlHostName, SSLSession session) -> {
            if (!urlHostName.equalsIgnoreCase(session.getPeerHost())) {
                System.out.println("Warning: URL host '" + urlHostName + "' is different from SSLSession host '"
                        + session.getPeerHost() + "'.");
            }
            return true;
        };

        HttpsURLConnection.setDefaultHostnameVerifier(hv);
    }
}


import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.GetObjectRequest;
import software.amazon.awssdk.services.s3.model.GetObjectResponse;
import software.amazon.awssdk.services.s3.model.S3Exception;
import software.amazon.awssdk.core.ResponseInputStream;

public class S3DownloadService {

    private S3Client s3Client;

    public S3DownloadService() {
        // Initialize the S3 client
        this.s3Client = S3Client.create();
    }

    public ResponseInputStream<GetObjectResponse> downloadFile(String bucketName, String objectKey) {
        try {
            // Create the request to download the file
            GetObjectRequest request = GetObjectRequest.builder()
                    .bucket(bucketName)
                    .key(objectKey)
                    .build();

            // Initiate the download and retrieve the response
            GetObjectResponse response = s3Client.getObject(request);

            // Return the input stream for the downloaded file
            return response.responseInputStream();
        } catch (S3Exception e) {
            // Handle any exceptions
            e.printStackTrace();
            return null;
        }
    }

    public static void main(String[] args) {
        // Example usage
        S3DownloadService downloadService = new S3DownloadService();
        String bucketName = "your-bucket-name";
        String objectKey = "your-object-key";
        ResponseInputStream<GetObjectResponse> inputStream = downloadService.downloadFile(bucketName, objectKey);

        // Process the downloaded file stream as needed
        // ...
    }
}
This code sets up an S3Client object, which represents the AWS S3 service. The downloadFile method takes the name of the S3 bucket and the object key as parameters. It creates a GetObjectRequest with the specified bucket name and object key, and then calls s3Client.getObject() to initiate the download. Finally, it returns the ResponseInputStream containing the downloaded file data.


******file extraction:

For extracting large data sets, using an external 3rd party library can provide better performance and speed compared to the standard java.util.zip package. One such popular library is Apache Commons Compress, which offers enhanced features and optimizations for working with zip files. Here's an example Java code that uses Apache Commons Compress for faster unzipping of large data sets:

java
Copy code
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.io.IOUtils;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class FileExtractor {

    public static void extractFiles(String zipFilePath, String destinationDirectory) {
        try {
            File destDir = new File(destinationDirectory);

            // Create the destination directory if it doesn't exist
            if (!destDir.exists()) {
                destDir.mkdirs();
            }

            // Open the zip file
            try (ZipArchiveInputStream zipIn = new ZipArchiveInputStream(new FileInputStream(zipFilePath))) {
                ZipArchiveEntry entry;
                byte[] buffer = new byte[4096];

                // Iterate over each entry in the zip file
                while ((entry = zipIn.getNextZipEntry()) != null) {
                    if (entry.isDirectory()) {
                        // Skip directory entries
                        continue;
                    }

                    String filePath = destinationDirectory + File.separator + entry.getName();

                    // Extract the file
                    try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath))) {
                        IOUtils.copy(zipIn, bos, buffer);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Example usage
        String zipFilePath = "path/to/your/archive.zip";
        String destinationDirectory = "path/to/your/destination/directory";
        extractFiles(zipFilePath, destinationDirectory);
    }
}
In this code, we use the ZipArchiveInputStream class from Apache Commons Compress to read the zip file. It provides better performance for large data sets compared to the standard Java ZipInputStream. The code follows a similar approach as before, iterating over each entry in the zip file and extracting files to the destination directory.

To use Apache Commons Compress, you'll need to include the library as a dependency in your project. You can download the library from the Apache Commons Compress website (https://commons.apache.org/proper/commons-compress/) or use a build tool like Maven or Gradle to manage the dependency.

Using an external library like Apache Commons Compress can significantly improve the speed of extracting large data sets from zip files.


******root file count and identifying encrypted files

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.EncryptedFileFilter;

import java.io.File;
import java.io.IOException;

public class FileAnalyzer {

    public static void analyzeDirectory(String directoryPath) {
        File directory = new File(directoryPath);

        // Get the count of root files
        int rootFileCount = FileUtils.listFiles(directory, null, false).size();
        System.out.println("Root file count: " + rootFileCount);

        // Identify encrypted files
        File[] encryptedFiles = directory.listFiles(EncryptedFileFilter.INSTANCE);
        if (encryptedFiles != null && encryptedFiles.length > 0) {
            System.out.println("Encrypted files:");
            for (File encryptedFile : encryptedFiles) {
                System.out.println(encryptedFile.getAbsolutePath());
            }
        } else {
            System.out.println("No encrypted files found.");
        }
    }

    public static void main(String[] args) {
        // Example usage
        String directoryPath = "path/to/your/directory";
        analyzeDirectory(directoryPath);
    }
}

Desc: For finding the root file count and identifying encrypted files in a directory containing large data sets, using an external library can provide more efficient and optimized functionality. Apache Commons IO is a popular library that offers enhanced features for file and directory operations. 
In this code, we use the FileUtils class from Apache Commons IO to perform the directory analysis. The listFiles method is used to retrieve all the files in the specified directory. We pass null as the file filter to include all files, and false to exclude subdirectories.

To identify encrypted files, we utilize the EncryptedFileFilter from Apache Commons IO. This filter detects encrypted files based on file extensions and magic numbers. We retrieve an array of encrypted files using the listFiles method and the EncryptedFileFilter.INSTANCE filter. We then iterate over the array and print the absolute path of each encrypted file.

To use Apache Commons IO, you need to include the library as a dependency in your project. You can download the library from the Apache Commons IO website (https://commons.apache.org/proper/commons-io/) or use a build tool like Maven or Gradle to manage the dependency.

*******count and names of corrupt files
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class CorruptFileAnalyzer {

    public static void analyzeDirectory(String directoryPath) {
        File directory = new File(directoryPath);
        int corruptFileCount = 0;

        // Iterate over each file in the directory
        for (File file : directory.listFiles()) {
            if (file.isFile() && isCorruptZipFile(file)) {
                corruptFileCount++;
                System.out.println("Corrupt file: " + file.getName());
            }
        }

        System.out.println("Corrupt file count: " + corruptFileCount);
    }

    private static boolean isCorruptZipFile(File file) {
        try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(file))) {
            ZipEntry entry = zipInputStream.getNextEntry();

            // Attempt to read the first entry of the zip file
            if (entry == null) {
                return true;
            }
        } catch (IOException e) {
            return true; // An IOException indicates a corrupt zip file
        }

        return false;
    }

    public static void main(String[] args) {
        // Example usage
        String directoryPath = "path/to/your/directory";
        analyzeDirectory(directoryPath);
    }
}

Desc: In this code, the analyzeDirectory method takes the directory path as a parameter and iterates over each file in the directory. For each file, it checks if it is a regular file and then calls the isCorruptZipFile method to determine if the file is a corrupt ZIP file. If it is found to be corrupt, the file name is printed, and the corruptFileCount is incremented.

The isCorruptZipFile method attempts to read the first entry of the ZIP file by creating a ZipInputStream with the file's input stream. If an exception occurs during the reading process (e.g., an IOException), it indicates that the file is corrupt.

*****file count in a directory and determine the email parent count for PST

import pstsdk.PstFile;
import pstsdk.folder.PstFolder;
import pstsdk.folder.PstMessage;
import pstsdk.mcpp.FolderType;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class DirectoryAnalyzer {

    public static void analyzeDirectory(String directoryPath) {
        try {
            // Get the file count in the directory
            long fileCount = Files.walk(Paths.get(directoryPath)).filter(Files::isRegularFile).count();
            System.out.println("File count: " + fileCount);

            // Check for PST files and count email parents
            long pstFileCount = Files.walk(Paths.get(directoryPath))
                    .filter(Files::isRegularFile)
                    .filter(path -> path.toString().toLowerCase().endsWith(".pst"))
                    .mapToLong(DirectoryAnalyzer::getEmailParentCount)
                    .sum();

            System.out.println("PST file count: " + pstFileCount);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static long getEmailParentCount(Path filePath) {
        try {
            PstFile pstFile = new PstFile(filePath.toString());
            PstFolder rootFolder = pstFile.getRootFolder();
            return countEmailParents(rootFolder);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    private static long countEmailParents(PstFolder folder) {
        long count = 0;

        if (folder.getFolderType() == FolderType.FOLDER_SEARCH || folder.getFolderType() == FolderType.FOLDER_NORMAL) {
            for (PstFolder subFolder : folder.getSubFolders()) {
                count += countEmailParents(subFolder);
            }
        } else if (folder.getFolderType() == FolderType.FOLDER_SENTMAIL || folder.getFolderType() == FolderType.FOLDER_INBOX) {
            count += folder.getContentCount();
        }

        return count;
    }

    public static void main(String[] args) {
        // Example usage
        String directoryPath = "path/to/your/directory";
        analyzeDirectory(directoryPath);
    }
}

DESC: To efficiently find the file count in a directory and determine the email parent count for PST files in a large data set, you can use the java.nio.file package in Java. However, when it comes to parsing PST files, using an external library would be more suitable. A popular library for working with PST files in Java is "pstsdk" (https://github.com/rjohnsondev/java-libpst)
In this code, the analyzeDirectory method takes the directory path as a parameter. It uses the Files.walk method from the java.nio.file package to recursively traverse the directory and count the total number of files. Then, it further filters the files to only include PST files and calculates the email parent count by invoking the getEmailParentCount method.

The getEmailParentCount method uses the "pstsdk" library to parse the PST file specified by the filePath. It opens the PST file, retrieves the root folder, and passes it to the countEmailParents method.

The countEmailParents method recursively traverses the PST folder hierarchy and checks if a folder is either of type FOLDER_SEARCH or FOLDER_NORMAL. For such folders, it continues recursively into subfolders. If a folder is of type FOLDER_SENTMAIL or FOLDER_INBOX, it increments the count by the content count of that folder (which represents the email parent count).


****************££££

import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class FileExtractor {
    public static void main(String[] args) {
        String zipFilePath = "path/to/your/Data.zip";
        String outputDirPath = "path/to/output/directory";

        extractFilesFromZip(zipFilePath, outputDirPath);
    }

    private static void extractFilesFromZip(String zipFilePath, String outputDirPath) {
        try (ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new FileInputStream(zipFilePath))) {
            ArchiveEntry entry;
            while ((entry = zipInputStream.getNextEntry()) != null) {
                if (!entry.isDirectory()) {
                    String entryName = entry.getName();
                    File outputFile = new File(outputDirPath, entryName);
                    File parentDir = outputFile.getParentFile();
                    if (!parentDir.exists())
                        parentDir.mkdirs();

                    try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {
                        byte[] buffer = new byte[8192];
                        int bytesRead;
                        while ((bytesRead = zipInputStream.read(buffer)) != -1) {
                            outputStream.write(buffer, 0, bytesRead);
                        }
                    }

                    if (entryName.endsWith(".zip")) {
                        String subZipFilePath = new File(outputDirPath, entryName).getPath();
                        String subOutputDirPath = new File(outputDirPath, entryName.substring(0, entryName.length() - 4)).getPath();
                        extractFilesFromZip(subZipFilePath, subOutputDirPath);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


******* file Search for encrypted files: 

import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.stream.Stream;

public class FileSearcher {
    private static int rootFileCount = 0;
    private static int encryptedFileCount = 0;

    public static void main(String[] args) {
        String directoryPath = "path_to_directory"; // Replace with your directory path

        try (Stream<Path> paths = Files.walk(Paths.get(directoryPath))) {
            paths.filter(Files::isRegularFile)
                    .forEach(FileSearcher::processFile);
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("Root File Count: " + rootFileCount);
        System.out.println("Encrypted File Count: " + encryptedFileCount);
    }

    private static void processFile(Path file) {
        rootFileCount++;
        if (isFileEncrypted(file)) {
            encryptedFileCount++;
        }
    }

    private static boolean isFileEncrypted(Path file) {
        // Add your logic here to determine if the file is encrypted
        // You can check file extensions, file content, or other criteria
        return false; // Replace with your encryption check logic
    }
}

******PST Updated

import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.poifs.filesystem.DirectoryEntry;
import org.apache.poi.poifs.filesystem.Entry;
import org.apache.poi.poifs.filesystem.DocumentEntry;
import org.apache.poi.hsmf.MAPIMessage;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class DirectoryAnalyzer {

    private static int fileCount = 0;
    private static int pstFileCount = 0;
    private static int emailParentCount = 0;

    public static void main(String[] args) {
        String directoryPath = "path/to/your/directory";
        analyzeDirectory(directoryPath);

        System.out.println("File count: " + fileCount);
        System.out.println("PST file count: " + pstFileCount);
        System.out.println("Email parent count: " + emailParentCount);
    }

    public static void analyzeDirectory(String directoryPath) {
        File directory = new File(directoryPath);
        if (directory.exists() && directory.isDirectory()) {
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isFile()) {
                        fileCount++;
                        if (file.getName().toLowerCase().endsWith(".pst")) {
                            pstFileCount++;
                            emailParentCount += getEmailParentCount(file);
                        }
                    } else if (file.isDirectory()) {
                        analyzeDirectory(file.getAbsolutePath());
                    }
                }
            }
        }
    }

    private static int getEmailParentCount(File pstFile) {
        try (FileInputStream fis = new FileInputStream(pstFile);
             POIFSFileSystem fs = new POIFSFileSystem(fis);
             DirectoryEntry root = fs.getRoot()) {

            Entry entry = root.getEntry("Top of Personal Folders");
            if (entry instanceof DocumentEntry) {
                DocumentEntry documentEntry = (DocumentEntry) entry;
                MAPIMessage msg = new MAPIMessage(documentEntry);
                return msg.getAttachmentFiles().size();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }
}

reading PST count


import com.pff.PSTFile;
import com.pff.PSTFolder;
import com.pff.PSTObject;

public class PSTReader {
    public static void main(String[] args) {
        String pstFilePath = "path/to/your.pst";
        
        try {
            PSTFile pstFile = new PSTFile(pstFilePath);
            PSTFolder rootFolder = pstFile.getRootFolder();
            int rootParentCount = countRootParents(rootFolder);
            
            System.out.println("Root Parent Count: " + rootParentCount);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static int countRootParents(PSTFolder folder) throws Exception {
        int count = 0;
        
        for (PSTObject child : folder.getChildren()) {
            if (child instanceof PSTFolder) {
                PSTFolder subFolder = (PSTFolder) child;
                count += countRootParents(subFolder);
            }
        }
        
        return count + 1; // Adding 1 for the root folder itself
    }
}

import org.apache.poi.hmef.HMEFMessage;
import org.apache.poi.hmef.attribute.MAPIRtfAttribute;
import org.apache.poi.hmef.attribute.MAPIStringAttribute;
import org.apache.poi.hmef.attribute.TNEFAttribute;
import org.apache.poi.hmef.attribute.TNEFProperty;
import org.apache.poi.hmef.attribute.TNEFPropertySet;
import org.apache.poi.hmef.extractor.HMEFContentsExtractor;
import org.apache.poi.hmef.extractor.MAPIMessage;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class EmailParentCountCalculator {
    public static void main(String[] args) {
        String pstFilePath = "path_to_your_pst_file.pst";
        int parentCount = calculateParentCount(pstFilePath);
        System.out.println("Parent Email Count: " + parentCount);
    }

    private static int calculateParentCount(String pstFilePath) {
        try (FileInputStream fis = new FileInputStream(pstFilePath);
             POIFSFileSystem fs = new POIFSFileSystem(fis)) {
            File tempFile = createTempFile(fs);
            HMEFContentsExtractor extractor = new HMEFContentsExtractor(tempFile);
            MAPIMessage msg = extractor.openMessage();
            return getParentEmailCount(msg);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }

    private static File createTempFile(POIFSFileSystem fs) throws IOException {
        File tempFile = File.createTempFile("temp", ".tmp");
        try (FileOutputStream fos = new FileOutputStream(tempFile)) {
            fs.writeFilesystem(fos);
        }
        return tempFile;
    }

    private static int getParentEmailCount(MAPIMessage msg) {
        int count = 0;
        TNEFAttribute attr = msg.getMainTNEFAttribute(TNEFProperty.ID_ATTACH_DATA);
        if (attr instanceof TNEFPropertySet) {
            TNEFPropertySet propSet = (TNEFPropertySet) attr;
            for (TNEFProperty prop : propSet) {
                if (prop.getName().equals("MessageClass")) {
                    if (prop.getValue().equals("IPM.Note")) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}