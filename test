import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import java.io.File;
import java.io.FileFilter;

public class FileTransportServiceTest {

    @Mock
    private RequestManagerDownloadConfiguration mockConfiguration;

    @Mock
    private S3Service mockS3Service;

    @Mock
    private Job mockJob;

    @Mock
    private RequestManagerCase mockRequestManagerCase;

    @Mock
    private File mockCaseFolder;

    @Mock
    private File mockRequestFolder;

    @Mock
    private File mockItemZip;

    private FileTransportService fileTransportService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);  // Initializes the mocks
        fileTransportService = new FileTransportService();
        fileTransportService.configuration = mockConfiguration;
        fileTransportService.s3Service = mockS3Service;

        // Mock the behavior of methods in RequestManagerDownloadConfiguration
        when(mockConfiguration.getCpuEnforcementGoldPath()).thenReturn("/some/path");
        when(mockConfiguration.getCpuEnforcementBucketName()).thenReturn("bucketName");
        when(mockConfiguration.getCpuEnforcementKeyName()).thenReturn("keyName");
        when(mockConfiguration.getKmsKey()).thenReturn("kmsKey");

        // Mock the behavior of RequestManagerCase and Job
        when(mockJob.getRequestManagerCase()).thenReturn(mockRequestManagerCase);
        when(mockRequestManagerCase.getCaseId()).thenReturn("123");

        // Mock the listFiles method for directories
        File[] mockRequestFolders = new File[] { mockRequestFolder };
        when(mockCaseFolder.listFiles(any(FileFilter.class))).thenReturn(mockRequestFolders);

        // Mock the listFiles method for item zip files
        File[] mockItemZips = new File[] { mockItemZip };
        when(mockRequestFolder.listFiles(any(FileFilter.class))).thenReturn(mockItemZips);
    }

    @Test
    public void testUploadItems() {
        // Arrange: Set up the mock behavior for the uploadItems method
        when(mockJob.getRequestManagerCase()).thenReturn(mockRequestManagerCase);
        when(mockRequestManagerCase.getCaseId()).thenReturn("123");

        // Act: Call the method being tested
        fileTransportService.uploadItems(mockJob);

        // Assert: Verify the correct interactions with the mock objects
        verify(mockS3Service).uploadS3File(anyString(), anyString(), anyString(), anyString());
    }
}