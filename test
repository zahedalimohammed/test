import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;

import static org.mockito.Mockito.*;

class FileTransportServiceTest {

    @InjectMocks
    private FileTransportService fileTransportService;

    @Mock
    private RequestManagerDownloadConfiguration configuration;

    @Mock
    private SSService ssservice;

    @Mock
    private Logger logger;

    @Mock
    private File mockFile;

    @Mock
    private File[] mockFiles;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testUploadItemsJobNull() throws IOException {
        // Arrange
        String goldKmsKey = "testKmsKey";
        when(configuration.getKmsKey()).thenReturn(goldKmsKey);
        when(configuration.getCpuEnforcementGoldPath()).thenReturn("/mock/path");

        File mockFolder = mock(File.class);
        File[] mockRequestFolders = new File[]{mockFolder};
        File[] mockItemZips = new File[]{mockFile};

        // Fix for ambiguity in listFiles() method by using argThat to specify the expected filter
        when(mockFolder.listFiles(argThat(fileFilter -> fileFilter != null))).thenReturn(mockRequestFolders);
        when(mockFile.listFiles(argThat(fileFilter -> fileFilter != null))).thenReturn(mockItemZips);
        when(mockFile.getPath()).thenReturn("/mock/path/Job1.zip");

        // Act
        fileTransportService.uploadItemsJob(null);

        // Assert
        verify(ssservice, times(1)).uploadS3File(anyString(), anyString(), anyString(), eq(goldKmsKey));
        verify(logger, times(1)).debug("Uploading Items");
    }

    @Test
    void testUploadItemsJobWithJob() throws IOException {
        // Arrange
        String goldKmsKey = "testKmsKey";
        when(configuration.getKmsKey()).thenReturn(goldKmsKey);
        when(configuration.getCpuEnforcementGoldPath()).thenReturn("/mock/path");

        // Mock the job and folder structure
        Job mockJob = mock(Job.class);
        when(mockJob.getRequestManagerCase()).thenReturn(new RequestManagerCase("Case1"));
        when(mockJob.getRequestManagerCase().getCaseId()).thenReturn("Case123");

        File mockFolder = mock(File.class);
        File[] mockRequestFolders = new File[]{mockFolder};
        File[] mockItemZips = new File[]{mockFile};

        // Fix for ambiguity in listFiles() method by using argThat to specify the expected filter
        when(mockFolder.listFiles(argThat(fileFilter -> fileFilter != null))).thenReturn(mockRequestFolders);
        when(mockFile.listFiles(argThat(fileFilter -> fileFilter != null))).thenReturn(mockItemZips);
        when(mockFile.getPath()).thenReturn("/mock/path/Case123.zip");

        // Act
        fileTransportService.uploadItemsJob(mockJob);

        // Assert
        verify(ssservice, times(1)).uploadS3File(anyString(), anyString(), anyString(), eq(goldKmsKey));
        verify(logger, times(1)).debug("Uploading Items");
    }

    @Test
    void testNoFilesToUpload() throws IOException {
        // Arrange
        String goldKmsKey = "testKmsKey";
        when(configuration.getKmsKey()).thenReturn(goldKmsKey);
        when(configuration.getCpuEnforcementGoldPath()).thenReturn("/mock/path");

        File mockFolder = mock(File.class);
        File[] mockRequestFolders = new File[]{mockFolder};

        // Fix for ambiguity in listFiles() method by using argThat to specify the expected filter
        when(mockFolder.listFiles(argThat(fileFilter -> fileFilter != null))).thenReturn(mockRequestFolders);
        when(mockFile.listFiles(argThat(fileFilter -> fileFilter != null))).thenReturn(new File[]{});

        // Act
        fileTransportService.uploadItemsJob(null);

        // Assert: No files should be uploaded
        verify(ssservice, never()).uploadS3File(anyString(), anyString(), anyString(), eq(goldKmsKey));
    }

    @Test
    void testUploadItemsJobWithMultipleFiles() throws IOException {
        // Arrange
        String goldKmsKey = "testKmsKey";
        when(configuration.getKmsKey()).thenReturn(goldKmsKey);
        when(configuration.getCpuEnforcementGoldPath()).thenReturn("/mock/path");

        // Mock multiple files in the directory
        File mockFolder = mock(File.class);
        File[] mockRequestFolders = new File[]{mockFolder};
        File[] mockItemZips = new File[]{mockFile, mockFile};

        // Fix for ambiguity in listFiles() method by using argThat to specify the expected filter
        when(mockFolder.listFiles(argThat(fileFilter -> fileFilter != null))).thenReturn(mockRequestFolders);
        when(mockFile.listFiles(argThat(fileFilter -> fileFilter != null))).thenReturn(mockItemZips);
        when(mockFile.getPath()).thenReturn("/mock/path/Case123.zip");

        // Act
        fileTransportService.uploadItemsJob(null);

        // Assert
        verify(ssservice, times(2)).uploadS3File(anyString(), anyString(), anyString(), eq(goldKmsKey));
    }
}