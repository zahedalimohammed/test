package org.finra.cpu.rmdownload.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Field;

import static org.mockito.Mockito.*;

class FileTransportServiceTest {

    @Mock
    private FileLister mockFileLister;  // Mocking the FileLister interface
    
    @Mock
    private S3Service mockS3Service;    // Mocking the S3Service
    
    @Mock
    private RequestManagerDownloadConfiguration mockConfiguration;  // Mocking configuration
    
    private FileTransportService fileTransportService;
    
    @BeforeEach
    void setUp() throws NoSuchFieldException, IllegalAccessException {
        MockitoAnnotations.openMocks(this);  // Initialize mocks
        fileTransportService = new FileTransportService();
        
        // Inject mocks into the service using reflection
        injectMock("configuration", mockConfiguration);
        injectMock("s3Service", mockS3Service);
        injectMock("fileLister", mockFileLister);
    }

    private void injectMock(String fieldName, Object mockObject) throws NoSuchFieldException, IllegalAccessException {
        Field field = FileTransportService.class.getDeclaredField(fieldName);
        field.setAccessible(true);  // Make the private field accessible
        field.set(fileTransportService, mockObject);
    }

    @Test
    void testUploadItems() {
        // Setup test data
        Job mockJob = mock(Job.class);
        RequestManagerCase mockCase = mock(RequestManagerCase.class);
        when(mockJob.getRequestManagerCase()).thenReturn(mockCase);
        when(mockCase.getCaseId()).thenReturn("Case1");

        File mockCaseFolder = mock(File.class);
        File mockItemZip = mock(File.class);
        
        // Mock the behavior of listFiles()
        File[] mockFolders = {mockCaseFolder};
        File[] mockItemZips = {mockItemZip};
        when(mockFileLister.listFiles(mockCaseFolder, DirectoryFileFilter.DIRECTORY)).thenReturn(mockFolders);
        when(mockFileLister.listFiles(mockCaseFolder, DirectoryFileFilter.FILE)).thenReturn(mockItemZips);
        
        // Mock the behavior of the S3 upload
        String mockItemZipPath = "some/path/to/item.zip";
        when(mockItemZip.getPath()).thenReturn(mockItemZipPath);

        // Act
        fileTransportService.uploadItems(mockJob);
        
        // Verify the interactions and ensure that the method to upload files was called
        verify(mockS3Service).uploadS3File(anyString(), eq(mockItemZipPath), anyString());
    }
}