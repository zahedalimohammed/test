package org.finra.cpu.rmdownload.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileFilter;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class FileTransportServiceTest {

    private static final Logger logger = LoggerFactory.getLogger(FileTransportServiceTest.class);

    @Mock
    private RequestManagerDownloadConfiguration configuration;

    @Mock
    private S3Service s3Service;

    @InjectMocks
    private FileTransportService fileTransportService;

    @Mock
    private Job job;

    @Mock
    private File caseFolder;

    @Mock
    private File requestFolder;

    @Mock
    private File itemZip;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        
        // Setting up mock behaviors for configuration
        when(configuration.getCpuEnforcementBucketName()).thenReturn("testBucket");
        when(configuration.getCpuEnforcementKeyName()).thenReturn("testKeyName");
        when(configuration.getKmsKey()).thenReturn("testKmsKey");
        when(configuration.getCpuEnforcementGoldPath()).thenReturn("testGoldPath");

        // Mocking job and case ID
        RequestManagerCase mockCase = mock(RequestManagerCase.class);
        when(job.getRequestManagerCase()).thenReturn(mockCase);
        when(mockCase.getCaseId()).thenReturn("12345");

        // Mocking File system interactions
        when(caseFolder.listFiles(any(FileFilter.class))).thenReturn(new File[]{requestFolder});
        when(requestFolder.listFiles(any(FileFilter.class))).thenReturn(new File[]{itemZip});
        when(itemZip.getPath()).thenReturn("testGoldPath/item.zip");
    }

    @Test
    void testUploadItems() {
        // Arrange
        String expectedGoldItemKeyName = "testKeyName/item.zip";

        // Act
        fileTransportService.uploadItems(job);

        // Assert
        // Verify that the S3 service upload method is called once with the correct parameters
        verify(s3Service, times(1)).uploadS3File(eq("testBucket"), eq(expectedGoldItemKeyName), eq("testGoldPath/item.zip"), eq("testKmsKey"));
    }

    @Test
    void testUploadItemsWithNullJob() {
        // Act
        fileTransportService.uploadItems(null);

        // Assert
        // Verify that the uploadS3File method is not called when job is null
        verify(s3Service, never()).uploadS3File(any(), any(), any(), any());
    }

    @Test
    void testUploadItemsNoFiles() {
        // Arrange
        when(caseFolder.listFiles(any(FileFilter.class))).thenReturn(null); // Simulate no files

        // Act
        fileTransportService.uploadItems(job);

        // Assert
        // Verify that the uploadS3File method is not called if no files exist
        verify(s3Service, never()).uploadS3File(any(), any(), any(), any());
    }
}